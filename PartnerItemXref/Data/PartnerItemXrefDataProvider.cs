//**************************************
//File generated by TRAVERSE SDK::Code Generator tool.
//Copyright(c) 2014, Open Systems, Inc.
//Wednesday, October 01, 2014
//**************************************
	
#region Using directives
using System;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.Practices.EnterpriseLibrary.Data;
using TRAVERSE.Core;
using TRAVERSE.Business;
//
using TRAVERSE.Business.PartnerItemXref;
#endregion

namespace TRAVERSE.Data
{
    /// <summary>
    /// Data provider class for entity PartnerItemXref.
    /// </summary>
    public sealed class PartnerItemXrefDataProvider : BaseProvider, IDataProvider
    {

        #region IDataProvider Members

        public IDataReader LoadData(string compId, DbTransaction transaction, FilterCriteria criteria)
        {
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper;
            if (string.IsNullOrEmpty(criteria.WhereClause) && string.IsNullOrEmpty(criteria.OrderBy))
            {
                commandWrapper = GetListCommand("dbo.trav_tblEdPartnerItemXref_GetList", database, criteria.FilterByKey);
            }
            else
            {
                commandWrapper = GetPagedCommand("dbo.trav_tblEdPartnerItemXref_GetPaged", database, criteria.WhereClause, criteria.OrderBy,
                    criteria.PageSize, criteria.PageIndex);
            }

            if (transaction == null)
            {
                return database.ExecuteReader(commandWrapper);
            }
            else
            {
                return database.ExecuteReader(commandWrapper, transaction);
            }
        }

        protected override DbCommand GetListCommand(string commandName, Database db, IDictionary<string,string> keyValues)
        {
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(db, commandName,
                this.UseStoredProcedure, GetCommandFromResource());
			db.AddInParameter(commandWrapper, "@PartnerId", DbType.AnsiString, DBNull.Value );
			db.AddInParameter(commandWrapper, "@TravItemId", DbType.AnsiString, DBNull.Value );
			db.AddInParameter(commandWrapper, "@TravUom", DbType.AnsiString, DBNull.Value );
            db.AddInParameter(commandWrapper, "@ALL", DbType.Boolean, 1);
            if (keyValues != null)
            {
                db.SetParameterValue(commandWrapper, "@PartnerId", keyValues["PartnerId"]);
                db.SetParameterValue(commandWrapper, "@TravItemId", keyValues["TravItemId"]);
                db.SetParameterValue(commandWrapper, "@TravUom", keyValues["TravUom"]);
                db.SetParameterValue(commandWrapper, "@ALL", 0);
            }
            return commandWrapper;
        }       
        #region Update Functions
                
        public bool Update(string compId, IEntity entity, DbTransaction transaction)
        {
            PartnerItemXref oEntity = entity as PartnerItemXref;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
				
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblEdPartnerItemXref_Update", 
                UseStoredProcedure, GetCommandFromResource());
            
            database.AddInParameter(commandWrapper, "@PartnerId", DbType.AnsiString, oEntity.PartnerId );
            database.AddInParameter(commandWrapper, "@OriginalPartnerId", DbType.AnsiString, oEntity.OriginalPartnerId);
            database.AddInParameter(commandWrapper, "@TravItemId", DbType.AnsiString, oEntity.TravItemId );
            database.AddInParameter(commandWrapper, "@OriginalTravItemId", DbType.AnsiString, oEntity.OriginalTravItemId);
            database.AddInParameter(commandWrapper, "@TravUom", DbType.AnsiString, oEntity.TravUom );
            database.AddInParameter(commandWrapper, "@OriginalTravUom", DbType.AnsiString, oEntity.OriginalTravUom);
            database.AddInParameter(commandWrapper, "@EdiUom", DbType.AnsiString, oEntity.EdiUom );
            database.AddInParameter(commandWrapper, "@EAN", DbType.AnsiString, oEntity.EAN );
            database.AddInParameter(commandWrapper, "@GTIN", DbType.AnsiString, oEntity.GTIN );
            database.AddInParameter(commandWrapper, "@UPC", DbType.AnsiString, oEntity.UPC );
            database.AddInParameter(commandWrapper, "@SKU", DbType.AnsiString, oEntity.SKU );
            database.AddInParameter(commandWrapper, "@BuyerCode", DbType.AnsiString, oEntity.BuyerCode );
            database.AddInParameter(commandWrapper, "@VendorCode", DbType.AnsiString, oEntity.VendorCode );
            database.AddInParameter(commandWrapper, "@InternalCode", DbType.AnsiString, oEntity.InternalCode );
            database.AddInParameter(commandWrapper, "@InternalCode1", DbType.AnsiString, oEntity.InternalCode1 );
            database.AddInParameter(commandWrapper, "@InternalCode2", DbType.AnsiString, oEntity.InternalCode2 );
            
            int results = 0;
            
            if (transaction != null)
            {
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
            oEntity.OriginalPartnerId = oEntity.PartnerId;
            oEntity.OriginalTravItemId = oEntity.TravItemId;
            oEntity.OriginalTravUom = oEntity.TravUom;
            
            oEntity.AcceptChanges();
    
            return Convert.ToBoolean(results);
        }
            
        #endregion
            
    
        #region Delete Functions
        public bool Delete(string compId, IEntity entity, DbTransaction transaction)
        {
            PartnerItemXref oEntity = entity as PartnerItemXref;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
			
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblEdPartnerItemXref_Delete", 
                UseStoredProcedure, GetCommandFromResource());
            database.AddInParameter(commandWrapper, "@PartnerId", DbType.AnsiString, oEntity.PartnerId);
            database.AddInParameter(commandWrapper, "@TravItemId", DbType.AnsiString, oEntity.TravItemId);
            database.AddInParameter(commandWrapper, "@TravUom", DbType.AnsiString, oEntity.TravUom);
            
            int results = 0;
            
            if (transaction != null)
            {	
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
            
            if (results == 0)
            {
                //throw new DataException("The record has been already deleted.");
                return false;
            }
            
            return Convert.ToBoolean(results);
        }//end Delete
        #endregion
    
        #region Insert Functions
        public bool Insert(string compId, IEntity entity, DbTransaction transaction )
        {
            PartnerItemXref oEntity = entity as PartnerItemXref;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
			
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblEdPartnerItemXref_Insert", 
                UseStoredProcedure, GetCommandFromResource());
            
            database.AddInParameter(commandWrapper, "@PartnerId", DbType.AnsiString, oEntity.PartnerId );
            database.AddInParameter(commandWrapper, "@TravItemId", DbType.AnsiString, oEntity.TravItemId );
            database.AddInParameter(commandWrapper, "@TravUom", DbType.AnsiString, oEntity.TravUom );
            database.AddInParameter(commandWrapper, "@EdiUom", DbType.AnsiString, oEntity.EdiUom );
            database.AddInParameter(commandWrapper, "@EAN", DbType.AnsiString, oEntity.EAN );
            database.AddInParameter(commandWrapper, "@GTIN", DbType.AnsiString, oEntity.GTIN );
            database.AddInParameter(commandWrapper, "@UPC", DbType.AnsiString, oEntity.UPC );
            database.AddInParameter(commandWrapper, "@SKU", DbType.AnsiString, oEntity.SKU );
            database.AddInParameter(commandWrapper, "@BuyerCode", DbType.AnsiString, oEntity.BuyerCode );
            database.AddInParameter(commandWrapper, "@VendorCode", DbType.AnsiString, oEntity.VendorCode );
            database.AddInParameter(commandWrapper, "@InternalCode", DbType.AnsiString, oEntity.InternalCode );
            database.AddInParameter(commandWrapper, "@InternalCode1", DbType.AnsiString, oEntity.InternalCode1 );
            database.AddInParameter(commandWrapper, "@InternalCode2", DbType.AnsiString, oEntity.InternalCode2 );
            
            int results = 0;
            if (transaction != null)
            {
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
            oEntity.OriginalPartnerId = oEntity.PartnerId;
            oEntity.OriginalTravItemId = oEntity.TravItemId;
            oEntity.OriginalTravUom = oEntity.TravUom;
            oEntity.AcceptChanges();
            return Convert.ToBoolean(results);
        }	
		
        public void BulkInsert(string compId, DbTransaction transaction, object entities)
        {
            EntityList<PartnerItemXref> list = entities as EntityList<PartnerItemXref>;
            if (list == null)
                throw new InvalidValueException("Unable to cast entity list object");
			
            System.Data.SqlClient.SqlBulkCopy bulkCopy = null;

            if (transaction != null)
            {
                System.Data.SqlClient.SqlConnection cnx = transaction.Connection as System.Data.SqlClient.SqlConnection;
                System.Data.SqlClient.SqlTransaction sqltransaction = transaction as System.Data.SqlClient.SqlTransaction;
                bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, sqltransaction); //, null);
            }
            else
            {
                bulkCopy = new System.Data.SqlClient.SqlBulkCopy(
                    ConnectionSetting.GetSqlConnection(Core.ApplicationContext.DataConnectionString, compId).ConnectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
            }
            
            bulkCopy.BulkCopyTimeout = 360;
            bulkCopy.DestinationTableName = "tblEdPartnerItemXref";
            
            DataTable dataTable = new DataTable();
            DataColumn col0 = dataTable.Columns.Add("PartnerId", typeof(System.String));
            col0.AllowDBNull = false;		
            DataColumn col1 = dataTable.Columns.Add("TravItemId", typeof(System.String));
            col1.AllowDBNull = false;		
            DataColumn col2 = dataTable.Columns.Add("TravUom", typeof(System.String));
            col2.AllowDBNull = false;		
            DataColumn col3 = dataTable.Columns.Add("EdiUom", typeof(System.String));
            col3.AllowDBNull = false;		
            DataColumn col4 = dataTable.Columns.Add("EAN", typeof(System.String));
            col4.AllowDBNull = true;		
            DataColumn col5 = dataTable.Columns.Add("GTIN", typeof(System.String));
            col5.AllowDBNull = true;		
            DataColumn col6 = dataTable.Columns.Add("UPC", typeof(System.String));
            col6.AllowDBNull = true;		
            DataColumn col7 = dataTable.Columns.Add("SKU", typeof(System.String));
            col7.AllowDBNull = true;		
            DataColumn col8 = dataTable.Columns.Add("BuyerCode", typeof(System.String));
            col8.AllowDBNull = true;		
            DataColumn col9 = dataTable.Columns.Add("VendorCode", typeof(System.String));
            col9.AllowDBNull = true;		
            DataColumn col10 = dataTable.Columns.Add("InternalCode", typeof(System.String));
            col10.AllowDBNull = true;		
            DataColumn col11 = dataTable.Columns.Add("InternalCode1", typeof(System.String));
            col11.AllowDBNull = true;		
            DataColumn col12 = dataTable.Columns.Add("InternalCode2", typeof(System.String));
            col12.AllowDBNull = true;		
            
            bulkCopy.ColumnMappings.Add("PartnerId", "PartnerId");
            bulkCopy.ColumnMappings.Add("TravItemId", "TravItemId");
            bulkCopy.ColumnMappings.Add("TravUom", "TravUom");
            bulkCopy.ColumnMappings.Add("EdiUom", "EdiUom");
            bulkCopy.ColumnMappings.Add("EAN", "EAN");
            bulkCopy.ColumnMappings.Add("GTIN", "GTIN");
            bulkCopy.ColumnMappings.Add("UPC", "UPC");
            bulkCopy.ColumnMappings.Add("SKU", "SKU");
            bulkCopy.ColumnMappings.Add("BuyerCode", "BuyerCode");
            bulkCopy.ColumnMappings.Add("VendorCode", "VendorCode");
            bulkCopy.ColumnMappings.Add("InternalCode", "InternalCode");
            bulkCopy.ColumnMappings.Add("InternalCode1", "InternalCode1");
            bulkCopy.ColumnMappings.Add("InternalCode2", "InternalCode2");
            
            foreach(PartnerItemXref entity in list)
            {
                if (entity.EntityState != EntityState.Added)
                    continue;
                DataRow row = dataTable.NewRow();
                    row["PartnerId"] = entity.PartnerId;
                    row["TravItemId"] = entity.TravItemId;
                    row["TravUom"] = entity.TravUom;
                    row["EdiUom"] = entity.EdiUom;
                    row["EAN"] = entity.EAN;
                    row["GTIN"] = entity.GTIN;
                    row["UPC"] = entity.UPC;
                    row["SKU"] = entity.SKU;
                    row["BuyerCode"] = entity.BuyerCode;
                    row["VendorCode"] = entity.VendorCode;
                    row["InternalCode"] = entity.InternalCode;
                    row["InternalCode1"] = entity.InternalCode1;
                    row["InternalCode2"] = entity.InternalCode2;
                
                dataTable.Rows.Add(row);
            }		
            
            // send the data to the server		
            bulkCopy.WriteToServer(dataTable);		
            // update back the state
            foreach(PartnerItemXref entity in list)
            {
                if (entity.EntityState != EntityState.Added)
                    continue;
                entity.AcceptChanges();
            }
        }
                
        #endregion
 
        #endregion "IDataProvider"
    }
}    

