//**************************************
//File generated by TRAVERSE SDK::Code Generator tool.
//Copyright(c) 2014, Open Systems, Inc.
//Friday, October 24, 2014
//**************************************
	
#region Using directives
using System;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.Practices.EnterpriseLibrary.Data;
using TRAVERSE.Core;
using TRAVERSE.Business;
using TRAVERSE.Business.WebContribImp;

#endregion

namespace TRAVERSE.Data
{
    /// <summary>
    /// Data provider class for entity WebContribImp.
    /// </summary>
    public sealed class WebContribImpDataProvider : BaseProvider, IDataProvider
    {

        #region IDataProvider Members

        public IDataReader LoadData(string compId, DbTransaction transaction, FilterCriteria criteria)
        {
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper;
            if (string.IsNullOrEmpty(criteria.WhereClause) && string.IsNullOrEmpty(criteria.OrderBy))
            {
                commandWrapper = GetListCommand("dbo.trav_tblArWebContribImp_CSI_GetList", database, criteria.FilterByKey);
            }
            else
            {
                commandWrapper = GetPagedCommand("dbo.trav_tblArWebContribImp_CSI_GetPaged", database, criteria.WhereClause, criteria.OrderBy,
                    criteria.PageSize, criteria.PageIndex);
            }

            if (transaction == null)
            {
                return database.ExecuteReader(commandWrapper);
            }
            else
            {
                return database.ExecuteReader(commandWrapper, transaction);
            }
        }

        protected override DbCommand GetListCommand(string commandName, Database db, IDictionary<string,string> keyValues)
        {
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(db, commandName,
                this.UseStoredProcedure, GetCommandFromResource());
			db.AddInParameter(commandWrapper, "@Id", DbType.Int64, DBNull.Value );
            db.AddInParameter(commandWrapper, "@ALL", DbType.Boolean, 1);
            if (keyValues != null)
            {
                db.SetParameterValue(commandWrapper, "@Id", keyValues["id"]);
                db.SetParameterValue(commandWrapper, "@ALL", 0);
            }
            return commandWrapper;
        }       
        #region Update Functions
                
        public bool Update(string compId, IEntity entity, DbTransaction transaction)
        {
            WebContribImp oEntity = entity as WebContribImp;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
				
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblArWebContribImp_CSI_Update", 
                UseStoredProcedure, GetCommandFromResource());
            
            database.AddInParameter(commandWrapper, "@Id", DbType.Int64, oEntity.Id );
            database.AddInParameter(commandWrapper, "@TransId", DbType.AnsiString, oEntity.TransId );
            database.AddInParameter(commandWrapper, "@PmtDate", DbType.DateTime, (oEntity.PmtDate.HasValue ? (object) oEntity.PmtDate : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@PmtAmt", DbType.Decimal, oEntity.PmtAmt );
            database.AddInParameter(commandWrapper, "@CheckNum", DbType.AnsiString, oEntity.CheckNum );
            database.AddInParameter(commandWrapper, "@GroupId", DbType.AnsiString, oEntity.GroupId );
            database.AddInParameter(commandWrapper, "@PmtMethodId", DbType.AnsiString, oEntity.PmtMethodId );
            database.AddInParameter(commandWrapper, "@CcHolder", DbType.AnsiString, oEntity.CcHolder );
            database.AddInParameter(commandWrapper, "@CcNum", DbType.AnsiString, oEntity.CcNum );
            database.AddInParameter(commandWrapper, "@CcExpire", DbType.DateTime, (oEntity.CcExpire.HasValue ? (object) oEntity.CcExpire : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@CcAuth", DbType.AnsiString, oEntity.CcAuth );
            database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiString, oEntity.CurrencyId );
            database.AddInParameter(commandWrapper, "@ExchRate", DbType.Decimal, oEntity.ExchRate );
            database.AddInParameter(commandWrapper, "@SourceCode", DbType.AnsiString, oEntity.SourceCode );
            database.AddInParameter(commandWrapper, "@Area", DbType.AnsiString, oEntity.Area );
            database.AddInParameter(commandWrapper, "@CustName", DbType.AnsiString, oEntity.CustName );
            database.AddInParameter(commandWrapper, "@Addr1", DbType.AnsiString, oEntity.Addr1 );
            database.AddInParameter(commandWrapper, "@Addr2", DbType.AnsiString, oEntity.Addr2 );
            database.AddInParameter(commandWrapper, "@City", DbType.AnsiString, oEntity.City );
            database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, oEntity.Region );
            database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, oEntity.Country );
            database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString, oEntity.PostalCode );
            database.AddInParameter(commandWrapper, "@SpAcknowlgmnt", DbType.AnsiString, oEntity.SpAcknowlgmnt );
            database.AddInParameter(commandWrapper, "@Lang", DbType.AnsiString, oEntity.Lang );
            database.AddInParameter(commandWrapper, "@DntSendAcknYN", DbType.Boolean, oEntity.DntSendAcknYN );
            database.AddInParameter(commandWrapper, "@RptExchRate", DbType.Decimal, oEntity.RptExchRate );
            database.AddInParameter(commandWrapper, "@EmailAddr", DbType.AnsiString, oEntity.EmailAddr );
            database.AddInParameter(commandWrapper, "@SendEmailYN", DbType.Boolean, oEntity.SendEmailYN );
            database.AddInParameter(commandWrapper, "@ValidYN", DbType.Boolean, oEntity.ValidYN );
            database.AddInParameter(commandWrapper, "@ImportedYN", DbType.Boolean, oEntity.ImportedYN );
            database.AddInParameter(commandWrapper, "@TravRcptHeaderId", DbType.Int32, (oEntity.TravRcptHeaderId.HasValue ? (object) oEntity.TravRcptHeaderId : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@WebId", DbType.Int64, oEntity.WebId );
            database.AddInParameter(commandWrapper, "@SkipYN", DbType.Boolean, (oEntity.SkipYN.HasValue ? (object) oEntity.SkipYN : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Errdescr", DbType.AnsiString, oEntity.Errdescr );
            database.AddInParameter(commandWrapper, "@GroupCountry", DbType.AnsiString, oEntity.GroupCountry );
            database.AddInParameter(commandWrapper, "@GroupState", DbType.AnsiString, oEntity.GroupState );
            database.AddInParameter(commandWrapper, "@GroupCity", DbType.AnsiString, oEntity.GroupCity );
            database.AddInParameter(commandWrapper, "@GroupName", DbType.AnsiString, oEntity.GroupName );
            database.AddInParameter(commandWrapper, "@BillToAddr1", DbType.AnsiString, oEntity.BillToAddr1 );
            database.AddInParameter(commandWrapper, "@BillToAddr2", DbType.AnsiString, oEntity.BillToAddr2 );
            database.AddInParameter(commandWrapper, "@BillToCity", DbType.AnsiString, oEntity.BillToCity );
            database.AddInParameter(commandWrapper, "@BillToRegion", DbType.AnsiString, oEntity.BillToRegion );
            database.AddInParameter(commandWrapper, "@BillToCountry", DbType.AnsiString, oEntity.BillToCountry );
            database.AddInParameter(commandWrapper, "@BillToPostalCode", DbType.AnsiString, oEntity.BillToPostalCode );
            database.AddInParameter(commandWrapper, "@CF", DbType.Xml, oEntity.CF );
            
            int results = 0;
            
            if (transaction != null)
            {
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
            
            oEntity.AcceptChanges();
    
            return Convert.ToBoolean(results);
        }
            
        #endregion
            
    
        #region Delete Functions
        public bool Delete(string compId, IEntity entity, DbTransaction transaction)
        {
            WebContribImp oEntity = entity as WebContribImp;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
			
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblArWebContribImp_CSI_Delete", 
                UseStoredProcedure, GetCommandFromResource());
            database.AddInParameter(commandWrapper, "@Id", DbType.Int64, oEntity.Id);
            
            int results = 0;
            
            if (transaction != null)
            {	
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
            
            if (results == 0)
            {
                //throw new DataException("The record has been already deleted.");
                return false;
            }
            
            return Convert.ToBoolean(results);
        }//end Delete
        #endregion
    
        #region Insert Functions
        public bool Insert(string compId, IEntity entity, DbTransaction transaction )
        {
            WebContribImp oEntity = entity as WebContribImp;
            if (oEntity == null)
                throw new InvalidValueException("Unable to cast entity object");
			
            Database database = ConnectionSetting.GetDatabase(Core.ApplicationContext.DataConnectionString, compId);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.trav_tblArWebContribImp_CSI_Insert", 
                UseStoredProcedure, GetCommandFromResource());
            
            database.AddOutParameter(commandWrapper, "@Id", DbType.Int64, 0);
            database.AddInParameter(commandWrapper, "@TransId", DbType.AnsiString, oEntity.TransId );
            database.AddInParameter(commandWrapper, "@PmtDate", DbType.DateTime, (oEntity.PmtDate.HasValue ? (object) oEntity.PmtDate  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@PmtAmt", DbType.Decimal, oEntity.PmtAmt );
            database.AddInParameter(commandWrapper, "@CheckNum", DbType.AnsiString, oEntity.CheckNum );
            database.AddInParameter(commandWrapper, "@GroupId", DbType.AnsiString, oEntity.GroupId );
            database.AddInParameter(commandWrapper, "@PmtMethodId", DbType.AnsiString, oEntity.PmtMethodId );
            database.AddInParameter(commandWrapper, "@CcHolder", DbType.AnsiString, oEntity.CcHolder );
            database.AddInParameter(commandWrapper, "@CcNum", DbType.AnsiString, oEntity.CcNum );
            database.AddInParameter(commandWrapper, "@CcExpire", DbType.DateTime, (oEntity.CcExpire.HasValue ? (object) oEntity.CcExpire  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@CcAuth", DbType.AnsiString, oEntity.CcAuth );
            database.AddInParameter(commandWrapper, "@CurrencyId", DbType.AnsiString, oEntity.CurrencyId );
            database.AddInParameter(commandWrapper, "@ExchRate", DbType.Decimal, oEntity.ExchRate );
            database.AddInParameter(commandWrapper, "@SourceCode", DbType.AnsiString, oEntity.SourceCode );
            database.AddInParameter(commandWrapper, "@Area", DbType.AnsiString, oEntity.Area );
            database.AddInParameter(commandWrapper, "@CustName", DbType.AnsiString, oEntity.CustName );
            database.AddInParameter(commandWrapper, "@Addr1", DbType.AnsiString, oEntity.Addr1 );
            database.AddInParameter(commandWrapper, "@Addr2", DbType.AnsiString, oEntity.Addr2 );
            database.AddInParameter(commandWrapper, "@City", DbType.AnsiString, oEntity.City );
            database.AddInParameter(commandWrapper, "@Region", DbType.AnsiString, oEntity.Region );
            database.AddInParameter(commandWrapper, "@Country", DbType.AnsiString, oEntity.Country );
            database.AddInParameter(commandWrapper, "@PostalCode", DbType.AnsiString, oEntity.PostalCode );
            database.AddInParameter(commandWrapper, "@SpAcknowlgmnt", DbType.AnsiString, oEntity.SpAcknowlgmnt );
            database.AddInParameter(commandWrapper, "@Lang", DbType.AnsiString, oEntity.Lang );
            database.AddInParameter(commandWrapper, "@DntSendAcknYN", DbType.Boolean, oEntity.DntSendAcknYN );
            database.AddInParameter(commandWrapper, "@RptExchRate", DbType.Decimal, oEntity.RptExchRate );
            database.AddInParameter(commandWrapper, "@EmailAddr", DbType.AnsiString, oEntity.EmailAddr );
            database.AddInParameter(commandWrapper, "@SendEmailYN", DbType.Boolean, oEntity.SendEmailYN );
            database.AddInParameter(commandWrapper, "@ValidYN", DbType.Boolean, oEntity.ValidYN );
            database.AddInParameter(commandWrapper, "@ImportedYN", DbType.Boolean, oEntity.ImportedYN );
            database.AddInParameter(commandWrapper, "@TravRcptHeaderId", DbType.Int32, (oEntity.TravRcptHeaderId.HasValue ? (object) oEntity.TravRcptHeaderId  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@WebId", DbType.Int64, oEntity.WebId );
            database.AddInParameter(commandWrapper, "@SkipYN", DbType.Boolean, (oEntity.SkipYN.HasValue ? (object) oEntity.SkipYN  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Errdescr", DbType.AnsiString, oEntity.Errdescr );
            database.AddInParameter(commandWrapper, "@GroupCountry", DbType.AnsiString, oEntity.GroupCountry );
            database.AddInParameter(commandWrapper, "@GroupState", DbType.AnsiString, oEntity.GroupState );
            database.AddInParameter(commandWrapper, "@GroupCity", DbType.AnsiString, oEntity.GroupCity );
            database.AddInParameter(commandWrapper, "@GroupName", DbType.AnsiString, oEntity.GroupName );
            database.AddInParameter(commandWrapper, "@BillToAddr1", DbType.AnsiString, oEntity.BillToAddr1 );
            database.AddInParameter(commandWrapper, "@BillToAddr2", DbType.AnsiString, oEntity.BillToAddr2 );
            database.AddInParameter(commandWrapper, "@BillToCity", DbType.AnsiString, oEntity.BillToCity );
            database.AddInParameter(commandWrapper, "@BillToRegion", DbType.AnsiString, oEntity.BillToRegion );
            database.AddInParameter(commandWrapper, "@BillToCountry", DbType.AnsiString, oEntity.BillToCountry );
            database.AddInParameter(commandWrapper, "@BillToPostalCode", DbType.AnsiString, oEntity.BillToPostalCode );
            database.AddInParameter(commandWrapper, "@CF", DbType.Xml, oEntity.CF );
            
            int results = 0;
            if (transaction != null)
            {
                results = database.ExecuteNonQuery(commandWrapper, transaction);
            }
            else
            {
                results = database.ExecuteNonQuery(commandWrapper);
            }
    
            oEntity.Id = (System.Int64) database.GetParameterValue(commandWrapper, "@Id");						
            oEntity.AcceptChanges();
            return Convert.ToBoolean(results);
        }	
		
        public void BulkInsert(string compId, DbTransaction transaction, object entities)
        {
            EntityList<WebContribImp> list = entities as EntityList<WebContribImp>;
            if (list == null)
                throw new InvalidValueException("Unable to cast entity list object");
			
            System.Data.SqlClient.SqlBulkCopy bulkCopy = null;

            if (transaction != null)
            {
                System.Data.SqlClient.SqlConnection cnx = transaction.Connection as System.Data.SqlClient.SqlConnection;
                System.Data.SqlClient.SqlTransaction sqltransaction = transaction as System.Data.SqlClient.SqlTransaction;
                bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, sqltransaction); //, null);
            }
            else
            {
                bulkCopy = new System.Data.SqlClient.SqlBulkCopy(
                    ConnectionSetting.GetSqlConnection(Core.ApplicationContext.DataConnectionString, compId).ConnectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
            }
            
            bulkCopy.BulkCopyTimeout = 360;
            bulkCopy.DestinationTableName = "tblArWebContribImp_CSI";
            
            DataTable dataTable = new DataTable();
            DataColumn col0 = dataTable.Columns.Add("id", typeof(System.Int64));
            col0.AllowDBNull = false;		
            DataColumn col1 = dataTable.Columns.Add("TransId", typeof(System.String));
            col1.AllowDBNull = false;		
            DataColumn col2 = dataTable.Columns.Add("PmtDate", typeof(System.DateTime));
            col2.AllowDBNull = true;		
            DataColumn col3 = dataTable.Columns.Add("PmtAmt", typeof(System.Decimal));
            col3.AllowDBNull = false;		
            DataColumn col4 = dataTable.Columns.Add("CheckNum", typeof(System.String));
            col4.AllowDBNull = true;		
            DataColumn col5 = dataTable.Columns.Add("GroupId", typeof(System.String));
            col5.AllowDBNull = true;		
            DataColumn col6 = dataTable.Columns.Add("PmtMethodId", typeof(System.String));
            col6.AllowDBNull = true;		
            DataColumn col7 = dataTable.Columns.Add("CcHolder", typeof(System.String));
            col7.AllowDBNull = true;		
            DataColumn col8 = dataTable.Columns.Add("CcNum", typeof(System.String));
            col8.AllowDBNull = true;		
            DataColumn col9 = dataTable.Columns.Add("CcExpire", typeof(System.DateTime));
            col9.AllowDBNull = true;		
            DataColumn col10 = dataTable.Columns.Add("CcAuth", typeof(System.String));
            col10.AllowDBNull = true;		
            DataColumn col11 = dataTable.Columns.Add("CurrencyID", typeof(System.String));
            col11.AllowDBNull = true;		
            DataColumn col12 = dataTable.Columns.Add("ExchRate", typeof(System.Decimal));
            col12.AllowDBNull = false;		
            DataColumn col13 = dataTable.Columns.Add("SourceCode", typeof(System.String));
            col13.AllowDBNull = true;		
            DataColumn col14 = dataTable.Columns.Add("Area", typeof(System.String));
            col14.AllowDBNull = true;		
            DataColumn col15 = dataTable.Columns.Add("CustName", typeof(System.String));
            col15.AllowDBNull = true;		
            DataColumn col16 = dataTable.Columns.Add("Addr1", typeof(System.String));
            col16.AllowDBNull = true;		
            DataColumn col17 = dataTable.Columns.Add("Addr2", typeof(System.String));
            col17.AllowDBNull = true;		
            DataColumn col18 = dataTable.Columns.Add("City", typeof(System.String));
            col18.AllowDBNull = true;		
            DataColumn col19 = dataTable.Columns.Add("Region", typeof(System.String));
            col19.AllowDBNull = true;		
            DataColumn col20 = dataTable.Columns.Add("Country", typeof(System.String));
            col20.AllowDBNull = true;		
            DataColumn col21 = dataTable.Columns.Add("PostalCode", typeof(System.String));
            col21.AllowDBNull = true;		
            DataColumn col22 = dataTable.Columns.Add("spAcknowlgmnt", typeof(System.String));
            col22.AllowDBNull = true;		
            DataColumn col23 = dataTable.Columns.Add("Lang", typeof(System.String));
            col23.AllowDBNull = true;		
            DataColumn col24 = dataTable.Columns.Add("DntSendAcknYN", typeof(System.Boolean));
            col24.AllowDBNull = false;		
            DataColumn col25 = dataTable.Columns.Add("RptExchRate", typeof(System.Decimal));
            col25.AllowDBNull = false;		
            DataColumn col26 = dataTable.Columns.Add("EmailAddr", typeof(System.String));
            col26.AllowDBNull = true;		
            DataColumn col27 = dataTable.Columns.Add("SendEmailYN", typeof(System.Boolean));
            col27.AllowDBNull = false;		
            DataColumn col28 = dataTable.Columns.Add("ValidYN", typeof(System.Boolean));
            col28.AllowDBNull = false;		
            DataColumn col29 = dataTable.Columns.Add("ImportedYN", typeof(System.Boolean));
            col29.AllowDBNull = false;		
            DataColumn col30 = dataTable.Columns.Add("TravRcptHeaderID", typeof(System.Int32));
            col30.AllowDBNull = true;		
            DataColumn col31 = dataTable.Columns.Add("WebId", typeof(System.Int64));
            col31.AllowDBNull = false;		
            DataColumn col32 = dataTable.Columns.Add("SkipYN", typeof(System.Boolean));
            col32.AllowDBNull = true;		
            DataColumn col33 = dataTable.Columns.Add("errdescr", typeof(System.String));
            col33.AllowDBNull = true;		
            DataColumn col34 = dataTable.Columns.Add("GroupCountry", typeof(System.String));
            col34.AllowDBNull = true;		
            DataColumn col35 = dataTable.Columns.Add("GroupState", typeof(System.String));
            col35.AllowDBNull = true;		
            DataColumn col36 = dataTable.Columns.Add("GroupCity", typeof(System.String));
            col36.AllowDBNull = true;		
            DataColumn col37 = dataTable.Columns.Add("GroupName", typeof(System.String));
            col37.AllowDBNull = true;		
            DataColumn col38 = dataTable.Columns.Add("BillToAddr1", typeof(System.String));
            col38.AllowDBNull = true;		
            DataColumn col39 = dataTable.Columns.Add("BillToAddr2", typeof(System.String));
            col39.AllowDBNull = true;		
            DataColumn col40 = dataTable.Columns.Add("BillToCity", typeof(System.String));
            col40.AllowDBNull = true;		
            DataColumn col41 = dataTable.Columns.Add("BillToRegion", typeof(System.String));
            col41.AllowDBNull = true;		
            DataColumn col42 = dataTable.Columns.Add("BillToCountry", typeof(System.String));
            col42.AllowDBNull = true;		
            DataColumn col43 = dataTable.Columns.Add("BillToPostalCode", typeof(System.String));
            col43.AllowDBNull = true;		
            DataColumn col44 = dataTable.Columns.Add("CF", typeof(System.String));
            col44.AllowDBNull = true;		
            
            bulkCopy.ColumnMappings.Add("id", "id");
            bulkCopy.ColumnMappings.Add("TransId", "TransId");
            bulkCopy.ColumnMappings.Add("PmtDate", "PmtDate");
            bulkCopy.ColumnMappings.Add("PmtAmt", "PmtAmt");
            bulkCopy.ColumnMappings.Add("CheckNum", "CheckNum");
            bulkCopy.ColumnMappings.Add("GroupId", "GroupId");
            bulkCopy.ColumnMappings.Add("PmtMethodId", "PmtMethodId");
            bulkCopy.ColumnMappings.Add("CcHolder", "CcHolder");
            bulkCopy.ColumnMappings.Add("CcNum", "CcNum");
            bulkCopy.ColumnMappings.Add("CcExpire", "CcExpire");
            bulkCopy.ColumnMappings.Add("CcAuth", "CcAuth");
            bulkCopy.ColumnMappings.Add("CurrencyID", "CurrencyID");
            bulkCopy.ColumnMappings.Add("ExchRate", "ExchRate");
            bulkCopy.ColumnMappings.Add("SourceCode", "SourceCode");
            bulkCopy.ColumnMappings.Add("Area", "Area");
            bulkCopy.ColumnMappings.Add("CustName", "CustName");
            bulkCopy.ColumnMappings.Add("Addr1", "Addr1");
            bulkCopy.ColumnMappings.Add("Addr2", "Addr2");
            bulkCopy.ColumnMappings.Add("City", "City");
            bulkCopy.ColumnMappings.Add("Region", "Region");
            bulkCopy.ColumnMappings.Add("Country", "Country");
            bulkCopy.ColumnMappings.Add("PostalCode", "PostalCode");
            bulkCopy.ColumnMappings.Add("spAcknowlgmnt", "spAcknowlgmnt");
            bulkCopy.ColumnMappings.Add("Lang", "Lang");
            bulkCopy.ColumnMappings.Add("DntSendAcknYN", "DntSendAcknYN");
            bulkCopy.ColumnMappings.Add("RptExchRate", "RptExchRate");
            bulkCopy.ColumnMappings.Add("EmailAddr", "EmailAddr");
            bulkCopy.ColumnMappings.Add("SendEmailYN", "SendEmailYN");
            bulkCopy.ColumnMappings.Add("ValidYN", "ValidYN");
            bulkCopy.ColumnMappings.Add("ImportedYN", "ImportedYN");
            bulkCopy.ColumnMappings.Add("TravRcptHeaderID", "TravRcptHeaderID");
            bulkCopy.ColumnMappings.Add("WebId", "WebId");
            bulkCopy.ColumnMappings.Add("SkipYN", "SkipYN");
            bulkCopy.ColumnMappings.Add("errdescr", "errdescr");
            bulkCopy.ColumnMappings.Add("GroupCountry", "GroupCountry");
            bulkCopy.ColumnMappings.Add("GroupState", "GroupState");
            bulkCopy.ColumnMappings.Add("GroupCity", "GroupCity");
            bulkCopy.ColumnMappings.Add("GroupName", "GroupName");
            bulkCopy.ColumnMappings.Add("BillToAddr1", "BillToAddr1");
            bulkCopy.ColumnMappings.Add("BillToAddr2", "BillToAddr2");
            bulkCopy.ColumnMappings.Add("BillToCity", "BillToCity");
            bulkCopy.ColumnMappings.Add("BillToRegion", "BillToRegion");
            bulkCopy.ColumnMappings.Add("BillToCountry", "BillToCountry");
            bulkCopy.ColumnMappings.Add("BillToPostalCode", "BillToPostalCode");
            bulkCopy.ColumnMappings.Add("CF", "CF");
            
            foreach(WebContribImp entity in list)
            {
                if (entity.EntityState != EntityState.Added)
                    continue;
                DataRow row = dataTable.NewRow();
                    row["id"] = entity.Id;
                    row["TransId"] = entity.TransId;
                    row["PmtDate"] = entity.PmtDate.HasValue ? (object) entity.PmtDate  : System.DBNull.Value;
                    row["PmtAmt"] = entity.PmtAmt;
                    row["CheckNum"] = entity.CheckNum;
                    row["GroupId"] = entity.GroupId;
                    row["PmtMethodId"] = entity.PmtMethodId;
                    row["CcHolder"] = entity.CcHolder;
                    row["CcNum"] = entity.CcNum;
                    row["CcExpire"] = entity.CcExpire.HasValue ? (object) entity.CcExpire  : System.DBNull.Value;
                    row["CcAuth"] = entity.CcAuth;
                    row["CurrencyID"] = entity.CurrencyId;
                    row["ExchRate"] = entity.ExchRate;
                    row["SourceCode"] = entity.SourceCode;
                    row["Area"] = entity.Area;
                    row["CustName"] = entity.CustName;
                    row["Addr1"] = entity.Addr1;
                    row["Addr2"] = entity.Addr2;
                    row["City"] = entity.City;
                    row["Region"] = entity.Region;
                    row["Country"] = entity.Country;
                    row["PostalCode"] = entity.PostalCode;
                    row["spAcknowlgmnt"] = entity.SpAcknowlgmnt;
                    row["Lang"] = entity.Lang;
                    row["DntSendAcknYN"] = entity.DntSendAcknYN;
                    row["RptExchRate"] = entity.RptExchRate;
                    row["EmailAddr"] = entity.EmailAddr;
                    row["SendEmailYN"] = entity.SendEmailYN;
                    row["ValidYN"] = entity.ValidYN;
                    row["ImportedYN"] = entity.ImportedYN;
                    row["TravRcptHeaderID"] = entity.TravRcptHeaderId.HasValue ? (object) entity.TravRcptHeaderId  : System.DBNull.Value;
                    row["WebId"] = entity.WebId;
                    row["SkipYN"] = entity.SkipYN.HasValue ? (object) entity.SkipYN  : System.DBNull.Value;
                    row["errdescr"] = entity.Errdescr;
                    row["GroupCountry"] = entity.GroupCountry;
                    row["GroupState"] = entity.GroupState;
                    row["GroupCity"] = entity.GroupCity;
                    row["GroupName"] = entity.GroupName;
                    row["BillToAddr1"] = entity.BillToAddr1;
                    row["BillToAddr2"] = entity.BillToAddr2;
                    row["BillToCity"] = entity.BillToCity;
                    row["BillToRegion"] = entity.BillToRegion;
                    row["BillToCountry"] = entity.BillToCountry;
                    row["BillToPostalCode"] = entity.BillToPostalCode;
                    row["CF"] = entity.CF;
                
                dataTable.Rows.Add(row);
            }		
            
            // send the data to the server		
            bulkCopy.WriteToServer(dataTable);		
            // update back the state
            foreach(WebContribImp entity in list)
            {
                if (entity.EntityState != EntityState.Added)
                    continue;
                entity.AcceptChanges();
            }
        }
                
        #endregion
 
        #endregion "IDataProvider"
    }
}    

