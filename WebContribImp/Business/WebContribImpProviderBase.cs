//**************************************
//File generated by TRAVERSE SDK::Code Generator tool.
//Copyright(c) 2014, Open Systems, Inc.
//Friday, October 24, 2014
//**************************************
//DO NOT edit this file. Instead use the partial class in WebContribImpProvider.cs
#region Using directives
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Data;
using TRAVERSE.Core;
#endregion

namespace TRAVERSE.Business.WebContribImp
{
    /// <summary>
    /// Base class for WebContribImpProvider.
    /// </summary>
    [Serializable]
    public abstract class WebContribImpProviderBase<T> : EntityProviderBase<T>
        where T : WebContribImp, new()
    {
        private static IDataProvider _dataProvider = null;
        
        protected override IDataProvider DataProvider
        {
            get
            {
                initDataProvider();
                return _dataProvider;
            }
            set
            {
                base.DataProvider = value;
            }
        }

        #region Helper
        private static void initDataProvider()
        {
            if (_dataProvider == null)
                _dataProvider = DataProviderLoader.Load("TRAVERSE.Data.WebContribImp", "WebContribImpDataProvider");
        }
        #endregion "Helper"
        
        #region Fill
        protected override void Fill(IDataReader reader, int start, int pageLength)
        {
            // advance to the starting row
            for (int i = 0; i < start; i++)
            {
                if (!reader.Read())
                    return; // not enough rows, just return
            }
            
            this.Items.RaiseListChangedEvents = false;
            for (int i = 0; i < pageLength; i++)
            {
                if (!reader.Read())
                    break; // we are done
            
                T c = new T();
                c.CompId = this.CompId;
                this.Items.Add(c);
            
                if (c.EntityState == EntityState.Added)
                {
                    c.SuppressEntityEvents = true;
                    c.Id = (System.Int64)reader["id"];
                    c.TransId = (System.String)reader["TransId"];
                    c.PmtDate = (reader.IsDBNull(reader.GetOrdinal("PmtDate")))?null:(System.DateTime?)reader["PmtDate"];
                    c.PmtAmt = (System.Decimal)reader["PmtAmt"];
                    c.CheckNum = (reader.IsDBNull(reader.GetOrdinal("CheckNum")))?null:(System.String)reader["CheckNum"];
                    c.GroupId = (reader.IsDBNull(reader.GetOrdinal("GroupId")))?null:(System.String)reader["GroupId"];
                    c.PmtMethodId = (reader.IsDBNull(reader.GetOrdinal("PmtMethodId")))?null:(System.String)reader["PmtMethodId"];
                    c.CcHolder = (reader.IsDBNull(reader.GetOrdinal("CcHolder")))?null:(System.String)reader["CcHolder"];
                    c.CcNum = (reader.IsDBNull(reader.GetOrdinal("CcNum")))?null:(System.String)reader["CcNum"];
                    c.CcExpire = (reader.IsDBNull(reader.GetOrdinal("CcExpire")))?null:(System.DateTime?)reader["CcExpire"];
                    c.CcAuth = (reader.IsDBNull(reader.GetOrdinal("CcAuth")))?null:(System.String)reader["CcAuth"];
                    c.CurrencyId = (reader.IsDBNull(reader.GetOrdinal("CurrencyID")))?null:(System.String)reader["CurrencyID"];
                    c.ExchRate = (System.Decimal)reader["ExchRate"];
                    c.SourceCode = (reader.IsDBNull(reader.GetOrdinal("SourceCode")))?null:(System.String)reader["SourceCode"];
                    c.Area = (reader.IsDBNull(reader.GetOrdinal("Area")))?null:(System.String)reader["Area"];
                    c.CustName = (reader.IsDBNull(reader.GetOrdinal("CustName")))?null:(System.String)reader["CustName"];
                    c.Addr1 = (reader.IsDBNull(reader.GetOrdinal("Addr1")))?null:(System.String)reader["Addr1"];
                    c.Addr2 = (reader.IsDBNull(reader.GetOrdinal("Addr2")))?null:(System.String)reader["Addr2"];
                    c.City = (reader.IsDBNull(reader.GetOrdinal("City")))?null:(System.String)reader["City"];
                    c.Region = (reader.IsDBNull(reader.GetOrdinal("Region")))?null:(System.String)reader["Region"];
                    c.Country = (reader.IsDBNull(reader.GetOrdinal("Country")))?null:(System.String)reader["Country"];
                    c.PostalCode = (reader.IsDBNull(reader.GetOrdinal("PostalCode")))?null:(System.String)reader["PostalCode"];
                    c.SpAcknowlgmnt = (reader.IsDBNull(reader.GetOrdinal("spAcknowlgmnt")))?null:(System.String)reader["spAcknowlgmnt"];
                    c.Lang = (reader.IsDBNull(reader.GetOrdinal("Lang")))?null:(System.String)reader["Lang"];
                    c.DntSendAcknYN = (System.Boolean)reader["DntSendAcknYN"];
                    c.RptExchRate = (System.Decimal)reader["RptExchRate"];
                    c.EmailAddr = (reader.IsDBNull(reader.GetOrdinal("EmailAddr")))?null:(System.String)reader["EmailAddr"];
                    c.SendEmailYN = (System.Boolean)reader["SendEmailYN"];
                    c.ValidYN = (System.Boolean)reader["ValidYN"];
                    c.ImportedYN = (System.Boolean)reader["ImportedYN"];
                    c.TravRcptHeaderId = (reader.IsDBNull(reader.GetOrdinal("TravRcptHeaderID")))?null:(System.Int32?)reader["TravRcptHeaderID"];
                    c.WebId = (System.Int64)reader["WebId"];
                    c.SkipYN = (reader.IsDBNull(reader.GetOrdinal("SkipYN")))?null:(System.Boolean?)reader["SkipYN"];
                    c.Errdescr = (reader.IsDBNull(reader.GetOrdinal("errdescr")))?null:(System.String)reader["errdescr"];
                    c.GroupCountry = (reader.IsDBNull(reader.GetOrdinal("GroupCountry")))?null:(System.String)reader["GroupCountry"];
                    c.GroupState = (reader.IsDBNull(reader.GetOrdinal("GroupState")))?null:(System.String)reader["GroupState"];
                    c.GroupCity = (reader.IsDBNull(reader.GetOrdinal("GroupCity")))?null:(System.String)reader["GroupCity"];
                    c.GroupName = (reader.IsDBNull(reader.GetOrdinal("GroupName")))?null:(System.String)reader["GroupName"];
                    c.BillToAddr1 = (reader.IsDBNull(reader.GetOrdinal("BillToAddr1")))?null:(System.String)reader["BillToAddr1"];
                    c.BillToAddr2 = (reader.IsDBNull(reader.GetOrdinal("BillToAddr2")))?null:(System.String)reader["BillToAddr2"];
                    c.BillToCity = (reader.IsDBNull(reader.GetOrdinal("BillToCity")))?null:(System.String)reader["BillToCity"];
                    c.BillToRegion = (reader.IsDBNull(reader.GetOrdinal("BillToRegion")))?null:(System.String)reader["BillToRegion"];
                    c.BillToCountry = (reader.IsDBNull(reader.GetOrdinal("BillToCountry")))?null:(System.String)reader["BillToCountry"];
                    c.BillToPostalCode = (reader.IsDBNull(reader.GetOrdinal("BillToPostalCode")))?null:(System.String)reader["BillToPostalCode"];
                    c.CF = (reader.IsDBNull(reader.GetOrdinal("CF")))?null:(System.String)reader["CF"];
                    this.FillCustom(reader, i);
                    c.AcceptChanges();
                    c.SuppressEntityEvents = false;
                }
                c.ParentCollection = this.Items;
            }
            this.Items.RaiseListChangedEvents = true;
            return;
        }
        #endregion "Fill"
    }
}
